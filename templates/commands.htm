<div ng-controller="commandControl" class="noselect">
	<div ng-keydown="checkKey($event)" ng-keyup="checkKey($event)" tabindex="1">
	<div class="command-options">
		<input type="checkbox" ng-model="showMultipleCharacterControl" ng-init="showMultipleCharacterControl=false" /> Show controls for multiple characters
	</div>
	<div class="command-toolbox toolbox" id="toolbox" style="position:fixed;">
		<p>Actions</p>
		<ul>
			<li class="command-element" ui-jq="draggable" data-command="setX" ui-options="commandDraggableParams">
				<ng-include src="characterIdTemplate"></ng-include>setX(
				<ul class="math-droppable" data-exp-name="x"></ul> 
			)
			<li class="command-element" ui-jq="draggable" data-command="setY" ui-options="commandDraggableParams">
				<ng-include src="characterIdTemplate"></ng-include>setY(
				<ul class="math-droppable" data-exp-name="y"></ul> 
			)</li>
			<li class="command-element" ui-jq="draggable" data-command="show" ui-options="commandDraggableParams">
				<ng-include src="characterIdTemplate"></ng-include>show</li>
			<li class="command-element" ui-jq="draggable" data-command="hide" ui-options="commandDraggableParams">
				<ng-include src="characterIdTemplate"></ng-include>hide</li>
			<li class="command-element" ui-jq="draggable" data-command="move" ui-options="commandDraggableParams">
				<ng-include src="characterIdTemplate"></ng-include>move(
				<ul class="math-droppable" data-exp-name="count"></ul> 
			)</li>
			<li class="command-element" ui-jq="draggable" data-command="changeCostume" ui-options="commandDraggableParams">
				<ng-include src="characterIdTemplate"></ng-include>changeCostume <select name="costume">
				<option value="pikachu">Default</option>
				<option value="pikaspec">Spectacles</option>
				<option value="pikasquirk">Squirk</option>
				<option value="pineapple">Pineapple</option>
				<option value="plum">Plum</option>
				<option value="pear">Pear</option>
				<option value="lemon">Lemon</option>
				<option value="cherry">Cherry</option>
				<option value="basket">Basket</option>
			</select>
			</li>
			<li class="command-element" ui-jq="draggable" data-command="changeBackground" ui-options="commandDraggableParams">changeBackground <select name="costume">
				<option value="binding_dark">binding_dark</option>
				<option value="squared_metal">squared_metal</option>
				<option value="stardust">stardust</option>
				<option value="tree_bark">tree_bark</option>
			</select></li>
			<li class="command-element" ui-jq="draggable" data-command="setFps" ui-options="commandDraggableParams">setFPS(
				<ul class="math-droppable" data-exp-name="fps"></ul>
			)</li>
			<!--<li class="command-element" ui-jq="draggable" data-command="setNumCharacters" ui-options="commandDraggableParams">setNumCharacters(
				<ul class="math-droppable" data-exp-name="count"></ul>
			)</li>-->
			<li class="command-element" ui-jq="draggable" data-command="showMessage" ui-options="commandDraggableParams">showMessage
				<input type="text" size="2" name="text">
				<ul class="math-droppable" data-exp-name="number"></ul>
			</li>
			<li class="command-element" ui-jq="draggable" data-command="setVariable" ui-options="commandDraggableParams">set <input type="text" size="2" name="varName"> =
				<ul class="math-droppable" data-exp-name="varExp"></ul> 
			</li>
		</ul>
		<p>Control</p>
		<ul>
			<li class="command-element sub-commands-allowed" data-command="forever" ui-jq="draggable" ui-options="commandDraggableParams">forever
				<ul class="command-inner-sortable" data-name="commands">  
				</ul>
			</li>
			<li class="command-element sub-commands-allowed" data-command="repeat" ui-jq="draggable" ui-options="commandDraggableParams">repeat(
				<ul class="math-droppable" data-exp-name="count"></ul> 
			)
				<ul class="command-inner-sortable" data-name="commands">  
				</ul>
			</li>
			<li class="command-element sub-commands-allowed" data-command="while" ui-jq="draggable" ui-options="commandDraggableParams">while(
				<ul class="expr-droppable" data-exp-name="condition"></ul> 
			)
				<ul class="command-inner-sortable" data-name="commands">  
				</ul>
			</li>			
			<li class="command-element sub-commands-allowed" data-command="for" ui-jq="draggable" ui-options="commandDraggableParams">for
				<input type="text" size="2" name="varName"> =
				<ul class="math-droppable" data-exp-name="exp1"></ul> to
				<ul class="math-droppable" data-exp-name="exp2"></ul>
				<ul class="command-inner-sortable" data-name="commands">  
				</ul>
			</li>
			<li class="command-element sub-commands-allowed" data-command="ifelse" ui-jq="draggable" ui-options="commandDraggableParams">if
				(<ul class="expr-droppable" data-exp-name="condition"></ul>)
				<br>
				<ul class="command-inner-sortable" data-name="ifblock">  
				</ul>
				else
				<ul class="command-inner-sortable" data-name="elseblock">  
				</ul>
			</li>
		</ul>
	</div>
	<div class="expr-toolbox toolbox" id="expr-toolbox" style="position:fixed;left:120px;">
		<p>Exp</p>
		<ul>
			<li class="expr-element" ui-jq="draggable" data-command="and" ui-options="expressionDraggableParams"
			data-eval="return this.exp1.eval() && this.exp2.eval();">
				<ul class="expr-droppable" data-exp-name="exp1"></ul> and <ul class="expr-droppable" data-exp-name="exp2"></ul>
			</li>
			<li class="expr-element" ui-jq="draggable" data-command="or" ui-options="expressionDraggableParams"
			data-eval="return this.exp1.eval() || this.exp2.eval();">
				<ul class="expr-droppable" data-exp-name="exp1"></ul> or <ul class="expr-droppable" data-exp-name="exp2"></ul>
			</li>
		</ul>

		<p>Cmp</p>
		<ul>
			<li class="cmp-element" ui-jq="draggable" data-command="lt" ui-options="expressionDraggableParams"
			data-eval="return this.exp1.eval() < this.exp2.eval();">
				<ul class="math-droppable" data-exp-name="exp1"></ul> &lt; <ul class="math-droppable" data-exp-name="exp2"></ul>
			</li>
			<li class="cmp-element" ui-jq="draggable" data-command="gt" ui-options="expressionDraggableParams"
			data-eval="return this.exp1.eval() > this.exp2.eval();">
				<ul class="math-droppable" data-exp-name="exp1"></ul> &gt; <ul class="math-droppable" data-exp-name="exp2"></ul>
			</li>
			<li class="cmp-element" ui-jq="draggable" data-command="eq" ui-options="expressionDraggableParams"
			data-eval="return this.exp1.eval() == this.exp2.eval();">
				<ul class="math-droppable" data-exp-name="exp1"></ul> = <ul class="math-droppable" data-exp-name="exp2"></ul>
			</li>
		</ul>

		<p>Math</p>
		<ul>
			<li class="math-element" ui-jq="draggable" data-command="add" ui-options="expressionDraggableParams"
			data-eval="return this.exp1.eval() + this.exp2.eval();">
				<ul class="math-droppable" data-exp-name="exp1"></ul> + <ul class="math-droppable" data-exp-name="exp2"></ul>
			</li>
			<li class="math-element" ui-jq="draggable" data-command="subtract" ui-options="expressionDraggableParams"
			data-eval="return this.exp1.eval() - this.exp2.eval();">
				<ul class="math-droppable" data-exp-name="exp1"></ul> - <ul class="math-droppable" data-exp-name="exp2"></ul>
			</li>
			<li class="math-element" ui-jq="draggable" data-command="multiply" ui-options="expressionDraggableParams"
			data-eval="return this.exp1.eval() * this.exp2.eval();">
				<ul class="math-droppable" data-exp-name="exp1"></ul> &times; <ul class="math-droppable" data-exp-name="exp2"></ul>
			</li>
			<li class="math-element" ui-jq="draggable" data-command="divide" ui-options="expressionDraggableParams"
			data-eval="return this.exp1.eval() / this.exp2.eval();">
				<ul class="math-droppable" data-exp-name="exp1"></ul> &divide; <ul class="math-droppable" data-exp-name="exp2"></ul>
			</li>
			<li class="math-element" ui-jq="draggable" data-command="modulo" ui-options="expressionDraggableParams"
			data-eval="return this.exp1.eval() % this.exp2.eval();">
				<ul class="math-droppable" data-exp-name="exp1"></ul> mod <ul class="math-droppable" data-exp-name="exp2"></ul>
			</li>
			<li class="var-element" ui-jq="draggable" data-command="random" ui-options="expressionDraggableParams"
			data-eval="return Math.floor(Math.random()*(this.exp2.eval()+1-this.exp1.eval())+this.exp1.eval());">
				random number from <ul class="math-droppable" data-exp-name="exp1"></ul> to <ul class="math-droppable" data-exp-name="exp2"></ul>
			</li>		
		</ul>
		<p>Vars</p>
		<ul>
			<li class="var-element" ui-jq="draggable" data-command="spriteX" ui-options="expressionDraggableParams"
			data-eval="return $('#sprite' + this.characterId.eval()).offset().left - $('#playbackArea').parent().offset().left * 1;">
				<ng-include src="characterIdTemplate"></ng-include>spriteX
			</li>
			<li class="var-element" ui-jq="draggable" data-command="spriteY" ui-options="expressionDraggableParams"
			data-eval="return $('#sprite' + this.characterId.eval()).offset().top;">
				<ng-include src="characterIdTemplate"></ng-include>spriteY
			</li>
			<li class="var-element" ui-jq="draggable" data-command="mouseX" ui-options="expressionDraggableParams"
			data-eval="return window.mouseX - $('#playbackArea').parent().offset().left * 1;">mouseX</li>
			<li class="var-element" ui-jq="draggable" data-command="mouseY" ui-options="expressionDraggableParams"
			data-eval="return window.mouseY;">mouseY</li>
			<li class="var-element" ui-jq="draggable" data-command="canvasWidth" ui-options="expressionDraggableParams"
			data-eval="return $('#playbackArea').parent().width();">canvasWidth</li>
			<li class="var-element" ui-jq="draggable" data-command="canvasHeight" ui-options="expressionDraggableParams"
			data-eval="return $('#playbackArea').parent().height();">canvasHeight</li>
			<li class="var-element" ui-jq="draggable" data-command="number" ui-options="expressionDraggableParams"
			data-eval="return this.value * 1;">num <input type="text" size="2" name="value"></li>
			<!-- we need the * 1 to handle the 1 + 2 = 3 and not 1 + 2 = 12 case! -->
			<li class="var-element" ui-jq="draggable" data-command="variable" ui-options="expressionDraggableParams"
			data-eval="if (typeof(window.userVariables[this.varName]) === 'undefined'){ alert(this.varName + ' is not defined. Assuming to be 0.'); window.userVariables[this.varName] = 0 }; return window.userVariables[this.varName];">var <input type="text" size="2" name="varName"></li>			
		</ul>
		<p>Other</p>
		<ul>
			<li class="cmp-element" ui-jq="draggable" data-command="touching" ui-options="expressionDraggableParams"
			data-eval="var a = $('#sprite' + this.exp1.eval()); var b = $('#sprite' + this.exp2.eval());
			var ax1 = a.offset().left; var ax2 = ax1 + a.width(); var ay1 = a.offset().top; var ay2 = ay1 + a.height();
			var bx1 = b.offset().left; var bx2 = bx1 + b.width(); var by1 = b.offset().top; var by2 = by1 + b.height();
			return ax1 < bx2 && ax2 > bx1 && ay1 < by2 && ay2 > by1;">
				sprite <ul class="math-droppable" data-exp-name="exp1"></ul> is touching sprite <ul class="math-droppable" data-exp-name="exp2"></ul>
			</li>
		</ul>
	</div>
	<script>
	  $(function() {
	    $( "#expr-toolbox" ).accordion({
	    	heightStyle:"content",
	    	header: "p",
	    });
	    $( "#toolbox" ).accordion({
	    	heightStyle:"content",
	    	header: "p",
	    });
	  });
	  </script>

	<div style="margin-left:200px;margin-top:20px;" class="command-workspace-outer">
		<p>Workspace</p>
		<ul id="workspace" class="command-workspace" ui-jq="sortable" ui-options="workspaceSortableParams">
		</ul>
	</div>

	<div style="float:left;" class="command-trash-outer">
		<div class="command-trash-icon" style="position: fixed;left: 480px;top: 120px;" ui-jq="droppable" ui-options="trashDroppableParams">
			<div id="trash" class="command-trash" ui-jq="sortable" ui-options="trashSortableParams">			
			</div>
			<i class="fa fa-trash"></i>
		</div>		
	</div>
	</div>
</div>
